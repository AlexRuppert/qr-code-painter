{"version":3,"sources":["qr/definitions.ts","qr/parameters.ts","qr/utilities.ts","qr/errorCorrection/galoisField.ts","qr/errorCorrection/reedSolomon.ts","qr/encoding/encoder.ts","qr/encoding/alphanumericEncoder.ts","qr/encoding/byteEncoder.ts","qr/encoding/numericEncoder.ts","qr/encoding/encoderFactory.ts","qr/modulePlacement/applyMasking.ts","qr/modulePlacement/applyPatterns.ts","qr/modulePlacement/applyInfo.ts","qr/modulePlacement/placeModules.ts","qr/matrixGenerator.ts","svg/renderer.ts","svg/save.ts","index.ts"],"names":[],"mappings":";AA4bC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,EAAA,QAAA,kBAAA,EAAA,QAAA,iBAAA,EAAA,QAAA,oBAAA,EAAA,QAAA,UAAA,EAAA,QAAA,qBAAA,EAAA,QAAA,wBAAA,EAAA,QAAA,cAAA,EA5bD,IAEY,EAFZ,EAAA,QAAA,gBA4bC,QAAA,SAAA,EA1bD,SAAY,GACV,EAAA,EAAA,EAAA,GAAA,IACA,EAAA,EAAA,EAAA,GAAA,IACA,EAAA,EAAA,EAAA,GAAA,IACA,EAAA,EAAA,EAAA,GAAA,IAJF,CAAY,IAAA,QAAA,SAAA,EAAQ,KAQpB,MAAM,EAAoB,CACxB,EACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,IAGI,SAAU,EAAc,GACrB,OAAgB,GAAf,EAAU,GAAS,GAG7B,SAAS,EAAiB,GAClB,MAAA,EAAa,EAAc,GAC3B,EAAqB,GAAW,EAAI,GAAK,EACzC,EAA8B,EAAI,KAAK,MAAM,EAAU,GActD,OAPL,EAAa,EACb,IACoB,GAAnB,EAAa,IACd,IARA,GAAW,EACP,EACiD,IAAhD,KAAK,IAAI,EAA6B,GAAK,GACR,IAAnC,EAA8B,IAOnC,EAKE,SAAU,EAAkB,GACzB,OAAA,KAAK,MAAM,EAAiB,GAAW,GAG1C,SAAU,EAAiB,GAExB,OADM,EAAiB,GAChB,EAGV,SAAU,EAAoB,GAC9B,GAAA,GAAW,EAAG,MAAO,GACnB,MAAA,EAAO,GAAK,GAAK,EAAU,GAC3B,EAAW,EAAI,K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","file":"src.392e22b9.js","sourceRoot":"..\\src","sourcesContent":["import { QrModes } from './parameters'\r\n\r\nexport enum EcLevels {\r\n  L = 0,\r\n  M = 1,\r\n  Q = 2,\r\n  H = 3,\r\n}\r\n\r\n//interleaved data --> ecPerBlock, wordsPerBlock\r\nconst qrDefinitionTable = [\r\n  7,\r\n  19,\r\n  10,\r\n  16,\r\n  13,\r\n  13,\r\n  17,\r\n  9,\r\n  10,\r\n  34,\r\n  16,\r\n  28,\r\n  22,\r\n  22,\r\n  28,\r\n  16,\r\n  15,\r\n  55,\r\n  26,\r\n  44,\r\n  18,\r\n  17,\r\n  22,\r\n  13,\r\n  20,\r\n  80,\r\n  18,\r\n  32,\r\n  26,\r\n  24,\r\n  16,\r\n  9,\r\n  26,\r\n  108,\r\n  24,\r\n  43,\r\n  18,\r\n  15,\r\n  22,\r\n  11,\r\n  18,\r\n  68,\r\n  16,\r\n  27,\r\n  24,\r\n  19,\r\n  28,\r\n  15,\r\n  20,\r\n  78,\r\n  18,\r\n  31,\r\n  18,\r\n  14,\r\n  26,\r\n  13,\r\n  24,\r\n  97,\r\n  22,\r\n  38,\r\n  22,\r\n  18,\r\n  26,\r\n  14,\r\n  30,\r\n  116,\r\n  22,\r\n  36,\r\n  20,\r\n  16,\r\n  24,\r\n  12,\r\n  18,\r\n  68,\r\n  26,\r\n  43,\r\n  24,\r\n  19,\r\n  28,\r\n  15,\r\n  20,\r\n  81,\r\n  30,\r\n  50,\r\n  28,\r\n  22,\r\n  24,\r\n  12,\r\n  24,\r\n  92,\r\n  22,\r\n  36,\r\n  26,\r\n  20,\r\n  28,\r\n  14,\r\n  26,\r\n  107,\r\n  22,\r\n  37,\r\n  24,\r\n  20,\r\n  22,\r\n  11,\r\n  30,\r\n  115,\r\n  24,\r\n  40,\r\n  20,\r\n  16,\r\n  24,\r\n  12,\r\n  22,\r\n  87,\r\n  24,\r\n  41,\r\n  30,\r\n  24,\r\n  24,\r\n  12,\r\n  24,\r\n  98,\r\n  28,\r\n  45,\r\n  24,\r\n  19,\r\n  30,\r\n  15,\r\n  28,\r\n  107,\r\n  28,\r\n  46,\r\n  28,\r\n  22,\r\n  28,\r\n  14,\r\n  30,\r\n  120,\r\n  26,\r\n  43,\r\n  28,\r\n  22,\r\n  28,\r\n  14,\r\n  28,\r\n  113,\r\n  26,\r\n  44,\r\n  26,\r\n  21,\r\n  26,\r\n  13,\r\n  28,\r\n  107,\r\n  26,\r\n  41,\r\n  30,\r\n  24,\r\n  28,\r\n  15,\r\n  28,\r\n  116,\r\n  26,\r\n  42,\r\n  28,\r\n  22,\r\n  30,\r\n  16,\r\n  28,\r\n  111,\r\n  28,\r\n  46,\r\n  30,\r\n  24,\r\n  24,\r\n  13,\r\n  30,\r\n  121,\r\n  28,\r\n  47,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  117,\r\n  28,\r\n  45,\r\n  30,\r\n  24,\r\n  30,\r\n  16,\r\n  26,\r\n  106,\r\n  28,\r\n  47,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  28,\r\n  114,\r\n  28,\r\n  46,\r\n  28,\r\n  22,\r\n  30,\r\n  16,\r\n  30,\r\n  122,\r\n  28,\r\n  45,\r\n  30,\r\n  23,\r\n  30,\r\n  15,\r\n  30,\r\n  117,\r\n  28,\r\n  45,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  116,\r\n  28,\r\n  45,\r\n  30,\r\n  23,\r\n  30,\r\n  15,\r\n  30,\r\n  115,\r\n  28,\r\n  47,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  115,\r\n  28,\r\n  46,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  115,\r\n  28,\r\n  46,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  115,\r\n  28,\r\n  46,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  115,\r\n  28,\r\n  46,\r\n  30,\r\n  24,\r\n  30,\r\n  16,\r\n  30,\r\n  121,\r\n  28,\r\n  47,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  121,\r\n  28,\r\n  47,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  122,\r\n  28,\r\n  46,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  122,\r\n  28,\r\n  46,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  117,\r\n  28,\r\n  47,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  118,\r\n  28,\r\n  47,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n]\r\n\r\nexport function getDimensions(version: number) {\r\n  return (version - 1) * 4 + 21\r\n}\r\n\r\nfunction getSupportedBits(version: number) {\r\n  const dimensions = getDimensions(version)\r\n  const versionInfoModules = version >= 7 ? 36 : 0\r\n  const alignmentElementsDimensions = 2 + Math.floor(version / 7)\r\n  const alignmentModules =\r\n    version <= 1\r\n      ? 0\r\n      : (Math.pow(alignmentElementsDimensions, 2) - 3) * 25 -\r\n        (alignmentElementsDimensions - 2) * 10\r\n  const bits =\r\n    dimensions * dimensions -\r\n    (49 + 15) * 3 -\r\n    (dimensions - 14) * 2 -\r\n    27 -\r\n    alignmentModules -\r\n    versionInfoModules\r\n\r\n  return bits\r\n}\r\n\r\nexport function getSupportedBytes(version: number) {\r\n  return Math.floor(getSupportedBits(version) / 8)\r\n}\r\n\r\nexport function getRemainderBits(version: number) {\r\n  const bits = getSupportedBits(version)\r\n  return bits % 8\r\n}\r\n\r\nexport function getAlignmentPattern(version: number) {\r\n  if (version <= 1) return []\r\n  const last = 18 + 4 * (version - 2)\r\n  const elements = 2 + Math.floor(version / 7)\r\n  const startStep = Math.floor((last - 6) / (elements - 1))\r\n  let firstStep = startStep\r\n  let nextStep = startStep\r\n  if (elements > 3) {\r\n    for (firstStep = startStep; firstStep > 0; firstStep--) {\r\n      nextStep = (last - 6 - firstStep) / (elements - 2)\r\n      if (nextStep % 2 == 0) break\r\n    }\r\n  }\r\n\r\n  const alignmentPattern = [6, 6 + firstStep]\r\n  for (let i = 1; i < elements - 1; i++)\r\n    alignmentPattern.push(6 + firstStep + i * nextStep)\r\n\r\n  return alignmentPattern\r\n}\r\n\r\nexport function getGroups(version: number, ecLevel: EcLevels) {\r\n  const index = (version - 1) * 8 + ecLevel * 2\r\n  let ecPerBlock = qrDefinitionTable[index]\r\n  let wordsPerBlock = qrDefinitionTable[index + 1]\r\n\r\n  let bytes = getSupportedBytes(version)\r\n  let y = 0\r\n  let x = 0\r\n  for (x = 0; x <= 56; x++) {\r\n    let candidate =\r\n      (bytes - (ecPerBlock + wordsPerBlock) * x) /\r\n      (ecPerBlock + wordsPerBlock + 1)\r\n\r\n    if (candidate % 1 === 0) {\r\n      y = candidate\r\n      break\r\n    }\r\n  }\r\n  const result = [{ blocks: x, wordsPerBlock, ecPerBlock }]\r\n  if (y > 0) {\r\n    result.push({ blocks: y, wordsPerBlock: wordsPerBlock + 1, ecPerBlock })\r\n  }\r\n  return result\r\n}\r\n\r\nexport function getChracterCountBits(version: number, mode: QrModes) {\r\n  let block =\r\n    version >= 1 && version <= 9\r\n      ? 0\r\n      : version >= 10 && version <= 26\r\n      ? 1\r\n      : version >= 27 && version <= 40\r\n      ? 2\r\n      : -1\r\n\r\n  if (block < 0) {\r\n    throw new Error(`Invalid version: ${version}`)\r\n  }\r\n\r\n  switch (mode) {\r\n    case QrModes.Numeric:\r\n      return 10 + block * 2\r\n    case QrModes.Alphanumeric:\r\n      return 9 + block * 2\r\n    case QrModes.Byte:\r\n      return Math.min(8 + block * 8, 16)\r\n    case QrModes.Kanji:\r\n      return 8 + block * 2\r\n    default:\r\n      throw new Error(`Invalid mode: ${mode}`)\r\n  }\r\n}\r\n\r\nexport function getRequiredNumberOfBits(groups) {\r\n  return (\r\n    groups.reduce((acc, val) => acc + val.wordsPerBlock * val.blocks, 0) * 8\r\n  )\r\n}\r\n","import {\r\n  EcLevels,\r\n  getAlignmentPattern,\r\n  getChracterCountBits,\r\n  getDimensions,\r\n  getGroups,\r\n  getRemainderBits,\r\n  getRequiredNumberOfBits,\r\n} from './definitions'\r\nexport type QrParameters = {\r\n  ecLevel: EcLevels\r\n  version: number\r\n  mode: QrModes\r\n  characterCountBits: number\r\n  requiredNumberOfBits: number\r\n  remainderBits: number\r\n  dimensions: number\r\n  alignmentPattern: number[]\r\n\r\n  groups: Array<{ blocks: number; wordsPerBlock: number; ecPerBlock: number }>\r\n}\r\n\r\nexport enum QrModes {\r\n  Numeric = 1,\r\n  Alphanumeric = 2,\r\n  Byte = 4,\r\n  Kanji = 8,\r\n  EXI = 7,\r\n}\r\n\r\nfunction getMode(content: string) {\r\n  if (/^\\d*$/.test(content)) return QrModes.Numeric\r\n  if (/^[0-9A-Z \\$%\\*\\+\\-\\.\\/:]*$/.test(content)) return QrModes.Alphanumeric\r\n  return QrModes.Byte\r\n}\r\n\r\nfunction getSmallestVersion(length: number, mode: QrModes) {\r\n  const ecLevel = EcLevels.L\r\n  let version, groups, requiredNumberOfBits, characterCountBits\r\n  for (version = 1; version <= 40; version++) {\r\n    groups = getGroups(version, ecLevel)\r\n    requiredNumberOfBits = getRequiredNumberOfBits(groups)\r\n    characterCountBits = getChracterCountBits(version, mode)\r\n    let upperLimit = 0\r\n    const availableBits = requiredNumberOfBits - (4 + characterCountBits)\r\n    switch (mode) {\r\n      case QrModes.Numeric:\r\n        upperLimit = Math.floor((availableBits / 10) * 3)\r\n        break\r\n      case QrModes.Alphanumeric:\r\n        upperLimit = Math.floor((availableBits / 11) * 2)\r\n        break\r\n      default:\r\n        upperLimit = Math.floor(availableBits / 8)\r\n        break\r\n    }\r\n\r\n    if (length <= upperLimit) break\r\n  }\r\n\r\n  if (version > 40) {\r\n    throw new Error('Input too long!')\r\n  }\r\n  return { version, ecLevel, groups, requiredNumberOfBits, characterCountBits }\r\n}\r\n\r\nexport function getParameters(content: string): QrParameters {\r\n  const mode = getMode(content)\r\n\r\n  const {\r\n    version,\r\n    ecLevel,\r\n    groups,\r\n    requiredNumberOfBits,\r\n    characterCountBits,\r\n  } = getSmallestVersion(content.length, mode)\r\n\r\n  return {\r\n    ecLevel,\r\n    version,\r\n    mode,\r\n    characterCountBits,\r\n    requiredNumberOfBits,\r\n    remainderBits: getRemainderBits(version),\r\n    dimensions: getDimensions(version),\r\n    alignmentPattern: getAlignmentPattern(version),\r\n    groups,\r\n  }\r\n}\r\n","export function chunkString(content: string, length: number): string[] {\r\n  const result: string[] = []\r\n  let i = 0\r\n  while (i * length < content.length)\r\n    result.push(content.substr(i++ * length, length))\r\n  return result\r\n}\r\n\r\nexport function get0s(count: number) {\r\n  let temp = ''\r\n  for (let i = 0; i < count; i++) {\r\n    temp += '0'\r\n  }\r\n  return temp\r\n}\r\n\r\nexport function pad0(content: string, length: number) {\r\n  const diff = length - content.length\r\n  return get0s(diff) + content\r\n}\r\n\r\nexport function numToBits(content: number, length: number) {\r\n  return pad0(content.toString(2), length)\r\n}\r\n\r\nexport function concatTypedArrays(a: Uint8Array, b: Uint8Array): Uint8Array {\r\n  const c = new Uint8Array(a.length + b.length)\r\n  c.set(a, 0)\r\n  c.set(b, a.length)\r\n  return c\r\n}\r\n\r\nexport function range(from: number, to: number): number[] {\r\n  return Array(to - from)\r\n    .fill(from)\r\n    .map((x, y) => x + y)\r\n}\r\nexport function createMatrix(dimensions: number): boolean[][] {\r\n  return [...new Array(dimensions)].map((arr) =>\r\n    [...new Array(dimensions)].fill(null),\r\n  )\r\n}\r\nexport function cloneMatrix(matrix: boolean[][]) {\r\n  return matrix.slice().map((m) => m.slice())\r\n}\r\nexport function mergeMatrices(\r\n  matrix1: boolean[][],\r\n  matrix2: boolean[][],\r\n): boolean[][] {\r\n  let result = cloneMatrix(matrix1)\r\n\r\n  for (let y = 0; y < matrix1.length; y++) {\r\n    for (let x = 0; x < matrix1[0].length; x++) {\r\n      if (matrix1[y][x] === null) {\r\n        result[y][x] = matrix2[y][x]\r\n      }\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\nexport enum MatrixIterationDirection {\r\n  Horizontal,\r\n  Vertical,\r\n}\r\nexport function iterateOverMatrix(\r\n  matrix: boolean[][],\r\n  fn: (value: boolean, x: number, y: number, matrix: boolean[][]) => void,\r\n  fnSecondary: (index: number, matrix: boolean[][]) => void = () => {},\r\n  direction = MatrixIterationDirection.Horizontal,\r\n) {\r\n  for (let y = 0; y < matrix.length; y++) {\r\n    for (let x = 0; x < matrix.length; x++) {\r\n      if (direction === MatrixIterationDirection.Horizontal)\r\n        fn(matrix[y][x], x, y, matrix)\r\n      else fn(matrix[x][y], y, x, matrix)\r\n    }\r\n    fnSecondary(y, matrix)\r\n  }\r\n}\r\n\r\nexport function debounce(fn: () => void, wait: number) {\r\n  let timer: number | undefined\r\n  return function () {\r\n    const later = () => {\r\n      timer = undefined\r\n      fn()\r\n    }\r\n    clearTimeout(timer)\r\n    timer = setTimeout(later, wait)\r\n  }\r\n}\r\n","function generateExponentsLookUpTable() {\r\n  const table = [1]\r\n  while (table.length < 256) {\r\n    const last = table[table.length - 1]\r\n    let next = last << 1\r\n    if (next > 255) next ^= 285\r\n\r\n    table.push(next)\r\n  }\r\n  return Object.assign({}, table)\r\n}\r\nfunction flip(obj: Object) {\r\n  const result = {}\r\n  Object.keys(obj).forEach((key) => (result[obj[key]] = +key))\r\n  return result\r\n}\r\n\r\nexport const exponents = generateExponentsLookUpTable()\r\nexport const logs = { ...flip(exponents), 1: 0 }\r\n\r\nfunction mul(x: number, y: number) {\r\n  if (x === 0 || y === 0) return 0\r\n  return exponents[(logs[x] + logs[y]) % 255]\r\n}\r\n\r\nfunction mulPoly(poly1: Uint8Array, poly2: number[]) {\r\n  const result: Uint8Array = new Uint8Array(poly1.length + poly2.length - 1)\r\n  poly1.forEach((p1, j) =>\r\n    poly2.forEach((p2, i) => (result[j + i] ^= mul(p2, p1))),\r\n  )\r\n\r\n  return result\r\n}\r\n\r\nexport function divPoly(dividend: Uint8Array, divisor: Uint8Array) {\r\n  let result = dividend.slice()\r\n  for (let i = 0; i < dividend.length - (divisor.length - 1); i++) {\r\n    let coef = result[i]\r\n    if (coef !== 0)\r\n      for (let j = 1; j < divisor.length; j++)\r\n        if (divisor[j] != 0) result[i + j] ^= mul(divisor[j], coef)\r\n  }\r\n\r\n  let remainder = result.slice(result.length - (divisor.length - 1))\r\n  return remainder\r\n}\r\n\r\nexport function generatorPoly(n: number) {\r\n  const pow = (x: number, power: number) => exponents[(logs[x] * power) % 255]\r\n  let g = Uint8Array.from([1])\r\n  for (let i = 0; i < n; i++) g = mulPoly(g, [1, pow(2, i)])\r\n\r\n  return g\r\n}\r\n","import { divPoly, generatorPoly } from './galoisField'\r\nimport { concatTypedArrays } from '../utilities'\r\nexport function getEcWords(\r\n  message: Uint8Array,\r\n  ecCodeWordsCount: number,\r\n): Uint8Array {\r\n  //pad\r\n  message = concatTypedArrays(message, new Uint8Array(ecCodeWordsCount))\r\n\r\n  const remainder = divPoly(message, generatorPoly(ecCodeWordsCount))\r\n  return remainder\r\n}\r\n","import { QrParameters } from '../parameters'\r\nimport {\r\n  chunkString,\r\n  numToBits,\r\n  pad0,\r\n  concatTypedArrays,\r\n  get0s,\r\n} from '../utilities'\r\nimport { getEcWords } from '../errorCorrection/reedSolomon'\r\nexport class Encoder {\r\n  protected config: QrParameters\r\n  constructor(config: QrParameters) {\r\n    this.config = config\r\n  }\r\n  encodeSymbols(content: string) {\r\n    return '1'\r\n  }\r\n\r\n  createBlocks(encodedData: Uint8Array) {\r\n    let currentElement = 0\r\n    return this.config.groups\r\n      .map((group) => {\r\n        const blocks = new Array(group.blocks)\r\n        for (let b = 0; b < blocks.length; b++) {\r\n          blocks[b] = new Uint8Array(group.wordsPerBlock)\r\n          for (let i = 0; i < group.wordsPerBlock; i++)\r\n            blocks[b][i] = encodedData[currentElement++]\r\n        }\r\n        return blocks\r\n      })\r\n      .flat()\r\n  }\r\n\r\n  interleave(blocks: Uint8Array[]) {\r\n    const maxLength = Math.max(...blocks.map((b) => b.length))\r\n    const sumLength = blocks.reduce((acc, val) => acc + val.length, 0)\r\n    const result = new Uint8Array(sumLength)\r\n    let count = 0\r\n    for (let i = 0; i < maxLength; i++)\r\n      for (let j = 0; j < blocks.length; j++)\r\n        if (i < blocks[j].length) result[count++] = blocks[j][i]\r\n\r\n    return result\r\n  }\r\n\r\n  encode(content: string) {\r\n    let encodedData = chunkString(\r\n      this.fillUpBits(this.prefix(content) + this.encodeSymbols(content)),\r\n      8,\r\n    )\r\n    let byteArray: Uint8Array = Uint8Array.from(\r\n      encodedData.map((el) => parseInt(el, 2)),\r\n    )\r\n\r\n    const blocks = this.createBlocks(byteArray)\r\n    const ecBlocks = blocks.map((b) =>\r\n      getEcWords(b, this.config.groups[0].ecPerBlock),\r\n    )\r\n    byteArray = this.interleave(blocks)\r\n    let ecByteArray = this.interleave(ecBlocks)\r\n\r\n    let bits =\r\n      Array.from(concatTypedArrays(byteArray, ecByteArray))\r\n        .map((uint) => numToBits(uint, 8))\r\n        .flat()\r\n        .join('') + this.suffix()\r\n\r\n    return bits\r\n  }\r\n\r\n  fillUpBits(bits: string) {\r\n    const diff = this.config.requiredNumberOfBits - bits.length\r\n    if (diff > 0) {\r\n      bits += get0s(Math.min(diff, 4)) //fill up to 0000\r\n      bits += get0s(8 - (bits.length % 8)) //fill up to be multiple of 8\r\n\r\n      while (bits.length < this.config.requiredNumberOfBits)\r\n        bits += '1110110000010001' //fill up until required number of bits\r\n\r\n      return bits.substr(0, this.config.requiredNumberOfBits)\r\n    }\r\n\r\n    throw new Error('encodedData larger than allowed number of bits')\r\n  }\r\n\r\n  prefix(content: string) {\r\n    let mode = numToBits(this.config.mode, 4)\r\n    let countIndicator = numToBits(\r\n      content.length,\r\n      this.config.characterCountBits,\r\n    )\r\n    return mode + countIndicator\r\n  }\r\n  suffix() {\r\n    return pad0('', this.config.remainderBits)\r\n  }\r\n}\r\n","import { Encoder } from './encoder'\r\nimport { chunkString, numToBits } from '../utilities'\r\nconst alphaNumericValueTable = (lookup: string) =>\r\n  [\r\n    '0',\r\n    '1',\r\n    '2',\r\n    '3',\r\n    '4',\r\n    '5',\r\n    '6',\r\n    '7',\r\n    '8',\r\n    '9',\r\n    'A',\r\n    'B',\r\n    'C',\r\n    'D',\r\n    'E',\r\n    'F',\r\n    'G',\r\n    'H',\r\n    'I',\r\n    'J',\r\n    'K',\r\n    'L',\r\n    'M',\r\n    'N',\r\n    'O',\r\n    'P',\r\n    'Q',\r\n    'R',\r\n    'S',\r\n    'T',\r\n    'U',\r\n    'V',\r\n    'W',\r\n    'X',\r\n    'Y',\r\n    'Z',\r\n    ' ',\r\n    '$',\r\n    '%',\r\n    '*',\r\n    '+',\r\n    '-',\r\n    '.',\r\n    '/',\r\n    ':',\r\n  ].indexOf(lookup)\r\n\r\nexport class AlphanumericEncoder extends Encoder {\r\n  encodeSymbols(content: string) {\r\n    return chunkString(content, 2)\r\n      .map(([first, last]) =>\r\n        last !== undefined\r\n          ? numToBits(\r\n              alphaNumericValueTable(first) * 45 + alphaNumericValueTable(last),\r\n              11,\r\n            )\r\n          : numToBits(alphaNumericValueTable(first), 6),\r\n      )\r\n      .join('')\r\n  }\r\n}\r\n","import { Encoder } from './encoder'\r\nimport { numToBits } from '../utilities'\r\n\r\nexport class ByteEncoder extends Encoder {\r\n  encodeSymbols(content: string) {\r\n    return content\r\n      .split('')\r\n      .map((char) => numToBits(char.charCodeAt(0), 8))\r\n      .join('')\r\n  }\r\n}\r\n","import { Encoder } from './encoder'\r\nimport { chunkString, numToBits } from '../utilities'\r\n\r\nexport class NumericEncoder extends Encoder {\r\n  encodeSymbols(content: string) {\r\n    return chunkString(content, 3)\r\n      .map((num) => numToBits(+num, +num < 10 ? 4 : +num < 100 ? 7 : 10))\r\n      .join('')\r\n  }\r\n}\r\n","import { QrModes, QrParameters } from '../parameters'\r\nimport { AlphanumericEncoder } from './alphanumericEncoder'\r\nimport { ByteEncoder } from './byteEncoder'\r\nimport { NumericEncoder } from './numericEncoder'\r\nexport function EncoderFactory(config: QrParameters) {\r\n  switch (config.mode) {\r\n    case QrModes.Alphanumeric:\r\n      return new AlphanumericEncoder(config)\r\n    case QrModes.Numeric:\r\n      return new NumericEncoder(config)\r\n    //nope, Kanji support does not seem reasonable as it wopuld require to add Shift JIS support for the mapping\r\n    //just use utf8\r\n    default:\r\n      return new ByteEncoder(config)\r\n  }\r\n}\r\n","import {\r\n  cloneMatrix,\r\n  iterateOverMatrix,\r\n  MatrixIterationDirection,\r\n  mergeMatrices,\r\n  range,\r\n} from '../utilities'\r\n\r\nfunction getLineGroupScore(matrix: boolean[][]) {\r\n  let score = 0\r\n  let currentColor = false\r\n  let currentRun = 0\r\n\r\n  const scoreLineGroupCondition = () => {\r\n    score += currentRun >= 5 ? 3 + Math.max(0, currentRun - 5) : 0\r\n    currentRun = 0\r\n  }\r\n\r\n  Object.values(MatrixIterationDirection).forEach((dir) => {\r\n    iterateOverMatrix(\r\n      matrix,\r\n      (value) => {\r\n        if (value !== currentColor) {\r\n          scoreLineGroupCondition()\r\n          currentColor = value\r\n        }\r\n        currentRun++\r\n      },\r\n      scoreLineGroupCondition,\r\n      dir as MatrixIterationDirection,\r\n    )\r\n  })\r\n  return score\r\n}\r\n\r\nfunction getSquareScore(matrix: boolean[][]) {\r\n  let score = 0\r\n\r\n  iterateOverMatrix(matrix, (_, x, y) => {\r\n    if (x < matrix.length - 1 && y < matrix.length - 1) {\r\n      const squareBitMask = range(0, 4).reduce(\r\n        //get current, right, bottom and bottom-right module and merge them to a bitmask\r\n        (acc, dirBitMask, i) =>\r\n          acc | (+matrix[y + (dirBitMask >> 1)][x + (dirBitMask & 0b01)] << i),\r\n        0,\r\n      )\r\n      const isSquare = squareBitMask === 0 || squareBitMask === 15\r\n      score += isSquare ? 3 : 0\r\n    }\r\n  })\r\n  return score\r\n}\r\n\r\nfunction getFinderConfusionScore(matrix: boolean[][]) {\r\n  const [d, w] = [true, false]\r\n  const template = [d, w, d, d, d, w, d, w, w, w, w]\r\n  const patterns = [\r\n    { template, current: 0 },\r\n    { template: template.slice().reverse(), current: 0 },\r\n  ]\r\n\r\n  let score = 0\r\n  const evaluateFinderConfusionCondition = (value: boolean) => {\r\n    patterns.forEach((pattern) => {\r\n      pattern.current +=\r\n        value === pattern.template[pattern.current] ? 1 : -pattern.current\r\n      if (pattern.current >= pattern.template.length) {\r\n        score += 40\r\n        pattern.current = 0\r\n      }\r\n    })\r\n  }\r\n\r\n  Object.values(MatrixIterationDirection).forEach((dir) => {\r\n    iterateOverMatrix(\r\n      matrix,\r\n      (value) => evaluateFinderConfusionCondition(value),\r\n      () => patterns.forEach((pattern) => (pattern.current = 0)),\r\n      dir as MatrixIterationDirection,\r\n    )\r\n  })\r\n  return score\r\n}\r\n\r\nfunction getColorImbalanceScore(matrix: boolean[][]) {\r\n  const totalCount = matrix.length * matrix.length\r\n  let darkCount = 0\r\n  iterateOverMatrix(matrix, (value) => (darkCount += value ? 1 : 0))\r\n\r\n  const percentage = +((darkCount / totalCount) * 100).toFixed(0)\r\n  const lower = percentage - (percentage & 5)\r\n  const higher = lower + 5\r\n  let score =\r\n    Math.min(...[lower, higher].map((el) => Math.abs(el - 50) / 5)) * 10\r\n\r\n  return score\r\n}\r\n\r\nfunction evaluateMasking(matrix: boolean[][]) {\r\n  return [\r\n    getLineGroupScore,\r\n    getSquareScore,\r\n    getFinderConfusionScore,\r\n    getColorImbalanceScore,\r\n  ]\r\n    .map((fn) => fn(matrix))\r\n    .reduce((acc, val) => acc + val, 0)\r\n}\r\n\r\nexport function applyMasking(\r\n  functionalMatrix: boolean[][],\r\n  dataMatrix: boolean[][],\r\n) {\r\n  const maskMatrix = (\r\n    matrix: boolean[][],\r\n    condition: { (x: any, y: any): boolean; (arg0: number, arg1: number): any },\r\n  ) => {\r\n    const copy = cloneMatrix(matrix)\r\n    iterateOverMatrix(copy, (value, x, y) => {\r\n      if (condition(x, y)) copy[y][x] = !value\r\n    })\r\n    return copy\r\n  }\r\n\r\n  const maskingMethods: Array<(x: number, y: number) => boolean> = [\r\n    (x, y) => (x + y) % 2 === 0,\r\n    (x, y) => y % 2 === 0,\r\n    (x, y) => x % 3 === 0,\r\n    (x, y) => (x + y) % 3 === 0,\r\n    (x, y) => (Math.floor(y / 2) + Math.floor(x / 3)) % 2 === 0,\r\n    (x, y) => ((x * y) % 2) + ((x * y) % 3) === 0,\r\n    (x, y) => (((x * y) % 2) + ((x * y) % 3)) % 2 === 0,\r\n    (x, y) => (((x + y) % 2) + ((x * y) % 3)) % 2 === 0,\r\n  ]\r\n\r\n  return maskingMethods\r\n    .map((method) =>\r\n      mergeMatrices(functionalMatrix, maskMatrix(dataMatrix, method)),\r\n    )\r\n    .reduce(\r\n      //find the matrix with lowest score\r\n      (acc, matrix, mask) => {\r\n        const score = evaluateMasking(matrix)\r\n        return score < acc.score ? { score, mask, matrix } : acc\r\n      },\r\n      { score: Number.POSITIVE_INFINITY, mask: 0, matrix: [] as boolean[][] },\r\n    )\r\n}\r\n","import { QrParameters } from '../parameters'\r\nimport { createMatrix, range } from '../utilities'\r\n\r\nfunction applyFinderPatterns(matrix: boolean[][]) {\r\n  const dimensions = matrix.length\r\n  const drawSquares = (x: number, y: number) => {\r\n    for (let j = 0; j < 3; j++)\r\n      for (let i = 0 + j; i < 7 - j; i++)\r\n        matrix[y + j][x + i] = matrix[y + 6 - j][x + i] = matrix[y + i][\r\n          x + j\r\n        ] = matrix[y + i][x + 6 - j] = j % 2 == 0\r\n\r\n    matrix[y + 3][x + 3] = true\r\n  }\r\n\r\n  const drawGapNextToSquares = () => {\r\n    for (let i = 0; i < 8; i++)\r\n      matrix[i][7] = matrix[dimensions - i - 1][7] = matrix[7][i] = matrix[7][\r\n        dimensions - i - 1\r\n      ] = matrix[dimensions - 7 - 1][i] = matrix[i][dimensions - 7 - 1] = false\r\n  }\r\n\r\n  drawSquares(0, 0)\r\n  drawSquares(0, dimensions - 7)\r\n  drawSquares(dimensions - 7, 0)\r\n  drawGapNextToSquares()\r\n}\r\n\r\nfunction applyTimingPatterns(matrix: boolean[][]) {\r\n  for (let i = 7; i < matrix.length - 7; i++)\r\n    matrix[6][i] = matrix[i][6] = i % 2 === 0\r\n}\r\n\r\nfunction applyDarkModule(matrix: boolean[][]) {\r\n  matrix[matrix.length - 8][8] = true\r\n}\r\n\r\nfunction applyReservedAreas(version: number, matrix: boolean[][]) {\r\n  const dimensions = matrix.length\r\n  ;[...range(0, 9), ...range(dimensions - 8, dimensions)].forEach(\r\n    (i) => (matrix[i][8] = matrix[8][i] = false),\r\n  )\r\n\r\n  //for version >=7 codes add additional areas\r\n  if (version >= 7)\r\n    for (let i = 0; i < 3; i++)\r\n      for (let j = 0; j < 6; j++)\r\n        matrix[dimensions - 11 + i][j] = matrix[j][dimensions - 11 + i] = false\r\n}\r\n\r\nfunction applyAlignmentPatterns(locations: number[], matrix: boolean[][]) {\r\n  const drawPattern = (x: number, y: number) => {\r\n    for (let j = 0; j < 3; j++)\r\n      for (let i = 0 + j; i < 5 - j; i++)\r\n        matrix[y + j][x + i] = matrix[y + 4 - j][x + i] = matrix[y + i][\r\n          x + j\r\n        ] = matrix[y + i][x + 4 - j] = j % 2 == 0\r\n  }\r\n\r\n  const [minLocation, maxLocation] = [\r\n    Math.min(...locations),\r\n    Math.max(...locations),\r\n  ]\r\n  locations\r\n    .map((x, i, array) => array.map((y) => [x, y])) //all coordinate combinations\r\n    .flat()\r\n    .filter(\r\n      //do not draw if it overlaps the finder patterns\r\n      ([x, y]) =>\r\n        !(\r\n          (x === minLocation && (y === minLocation || y === maxLocation)) ||\r\n          (y === minLocation && (x === minLocation || x === maxLocation))\r\n        ),\r\n    ) //add -2 offset, as location-coordinates use center, while we use top-left\r\n    .map(([x, y]) => [x - 2, y - 2])\r\n    .forEach(([x, y]) => drawPattern(x, y))\r\n}\r\n\r\nexport function getPatternMatrix(config: QrParameters) {\r\n  let patternMatrix = createMatrix(config.dimensions)\r\n  applyFinderPatterns(patternMatrix)\r\n  applyAlignmentPatterns(config.alignmentPattern, patternMatrix)\r\n  applyReservedAreas(config.version, patternMatrix)\r\n  applyTimingPatterns(patternMatrix)\r\n  applyDarkModule(patternMatrix)\r\n  return patternMatrix\r\n}\r\n","import { divPoly } from '../errorCorrection/galoisField'\r\nimport { QrParameters } from '../parameters'\r\nimport { get0s, numToBits, pad0, range } from '../utilities'\r\n\r\nexport function applyFormatInformation(\r\n  config: QrParameters,\r\n  mask: number,\r\n  matrix: boolean[][],\r\n) {\r\n  let bits = ['01', '00', '11', '10'][config.ecLevel]\r\n  bits += numToBits(mask, 3)\r\n\r\n  const bits10 = (bits + get0s(10)).split('').map((el) => +el)\r\n\r\n  const generator = Uint8Array.from([1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1])\r\n  const message = Uint8Array.from(bits10)\r\n  const remainder = divPoly(message, generator).join('')\r\n\r\n  bits += pad0(remainder, 10)\r\n  const formatInfo = numToBits(parseInt(bits, 2) ^ 21522, 15)\r\n\r\n  const horizontal = [\r\n    ...range(0, 8 + 1),\r\n    ...range(matrix.length - 7, matrix.length),\r\n  ]\r\n\r\n  const vertical = horizontal.slice().reverse()\r\n  let j = 0\r\n  horizontal.forEach(\r\n    (h) => (matrix[8][h] = h !== 6 ? formatInfo[j++] === '1' : matrix[8][h]),\r\n  )\r\n  j = 0\r\n  vertical.forEach(\r\n    (v) =>\r\n      (matrix[v][8] =\r\n        v !== 6 && v !== matrix.length - 8\r\n          ? formatInfo[j++] === '1'\r\n          : matrix[v][8]),\r\n  )\r\n\r\n  return matrix\r\n}\r\n\r\nexport function applyVerisonInformation(\r\n  config: QrParameters,\r\n  matrix: boolean[][],\r\n) {\r\n  if (config.version < 7) return matrix\r\n  const generator = Uint8Array.from([1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1])\r\n  const bits = numToBits(config.version, 6)\r\n  const bits10 = (bits + get0s(12)).split('').map((el) => +el)\r\n  const message = Uint8Array.from(bits10)\r\n  const remainder = divPoly(message, generator).join('')\r\n  const versionInfo = bits + pad0(remainder, 12)\r\n\r\n  let d = 0\r\n\r\n  for (let x = 0; x < 6; x++)\r\n    for (let y = 0; y < 3; y++)\r\n      matrix[matrix.length - 9 - y][5 - x] = matrix[5 - x][\r\n        matrix.length - 9 - y\r\n      ] = versionInfo[d++] === '1'\r\n\r\n  return matrix\r\n}\r\n","import { QrParameters } from '../parameters'\r\nimport { createMatrix } from '../utilities'\r\nimport { applyMasking } from './applyMasking'\r\nimport { getPatternMatrix } from './applyPatterns'\r\nimport {\r\n  applyFormatInformation,\r\n  applyVerisonInformation as applyVersionInformation,\r\n} from './applyInfo'\r\nenum MoveDirection {\r\n  Up = -1,\r\n  Down = 1,\r\n}\r\n\r\nfunction applyData(patternMatrix: boolean[][], data: string) {\r\n  let dataMatrix = createMatrix(patternMatrix.length)\r\n  const MAX = patternMatrix.length - 1\r\n  let x = MAX\r\n  let dx = 0\r\n  let y = MAX\r\n  let d = 0\r\n  let direction: MoveDirection = MoveDirection.Up\r\n\r\n  while (d < data.length) {\r\n    if (patternMatrix[y][x - dx] === null)\r\n      //only empty fields, otherwise skip\r\n      dataMatrix[y][x - dx] = data[d++] === '1'\r\n\r\n    if (dx === 1) {\r\n      y += direction //go up or down\r\n      if (y < 0 || y > MAX) {\r\n        //flip direction if reaching top or bottom, move column to left\r\n        y = (MAX + MAX * direction) / 2\r\n        direction *= -1\r\n        x -= 2\r\n      }\r\n    }\r\n    dx ^= 1 //alternate from right to left in each column\r\n\r\n    if (x >= 6 && x <= 7)\r\n      //next to vertical timing pattern? -> skip\r\n      x = 5\r\n  }\r\n  return dataMatrix\r\n}\r\n\r\nexport function place(config: QrParameters, data: string) {\r\n  let patternMatrix = getPatternMatrix(config)\r\n  let dataMatrix = applyData(patternMatrix, data)\r\n  let { mask, matrix } = applyMasking(patternMatrix, dataMatrix)\r\n  let result = applyFormatInformation(config, mask, matrix)\r\n  result = applyVersionInformation(config, matrix)\r\n\r\n  return result\r\n}\r\n","import { getParameters } from './parameters'\r\nimport { EncoderFactory } from './encoding/encoderFactory'\r\nimport { place } from './modulePlacement/placeModules'\r\n\r\nexport default function getMatrix(content: string) {\r\n  const config = getParameters(content)\r\n  let bitString = EncoderFactory(config).encode(content)\r\n  return place(config, bitString)\r\n}\r\n","interface Position {\r\n  x: number\r\n  y: number\r\n}\r\nfunction createElement(tag: string) {\r\n  return document.createElementNS('http://www.w3.org/2000/svg', tag)\r\n}\r\n\r\nconst debug = true\r\nfunction createRectTemplate() {\r\n  let rect = createElement('rect')\r\n\r\n  rect.setAttribute('width', '1')\r\n  rect.setAttribute('height', '1')\r\n\r\n  return rect\r\n}\r\nconst rectTemplate = createRectTemplate()\r\n\r\nfunction createRect(container: DocumentFragment, position: Position) {\r\n  const rect = rectTemplate.cloneNode(false) as SVGElement\r\n  rect.setAttribute('x', position.x.toString())\r\n  rect.setAttribute('y', position.y.toString())\r\n\r\n  container.appendChild(rect)\r\n}\r\n\r\nexport function render(canvas: SVGSVGElement, matrix: boolean[][]) {\r\n  canvas.innerHTML = ''\r\n  canvas.setAttribute(\r\n    'viewBox',\r\n    `0 0 ${matrix[0].length + 8 || 10} ${matrix.length + 8}`,\r\n  )\r\n  const g = createElement('g')\r\n  g.setAttribute('fill', '#000')\r\n  g.setAttribute('shape-rendering', 'crispEdges')\r\n\r\n  const fragment = document.createDocumentFragment()\r\n  for (let y = 0; y < matrix.length; y++) {\r\n    for (let x = 0; x < matrix[y].length; x++) {\r\n      if (matrix[y][x] === true) {\r\n        createRect(fragment, { x: x + 4, y: y + 4 })\r\n      }\r\n    }\r\n  }\r\n  g.appendChild(fragment)\r\n  canvas.appendChild(g)\r\n}\r\n\r\nexport function clear(canvas: SVGSVGElement) {\r\n  canvas.innerHTML = ''\r\n}\r\n","export function saveSvg(svg: SVGSVGElement, a: HTMLAnchorElement) {\r\n  const fileName = `qr-code.svg`\r\n  let blob = new Blob(['<?xml version=\"1.0\"?>' + svg.outerHTML], {\r\n    type: 'image/svg+xml;charset=utf-8',\r\n  })\r\n  const url = window.URL.createObjectURL(blob)\r\n\r\n  a.href = url\r\n  a.download = fileName\r\n  a.click()\r\n}\r\n","import getMatrix from './qr/matrixGenerator'\r\nimport { render, clear } from './svg/renderer'\r\nimport { debounce } from './qr/utilities'\r\nimport { saveSvg } from './svg/save'\r\n\r\ntry {\r\n  //@ts-ignore\r\n  module.hot.accept()\r\n} catch (error) {}\r\n\r\nwindow.onload = () => {\r\n  const canvas = document.querySelector('svg') as SVGSVGElement\r\n  const input = document.querySelector('#input textarea') as HTMLInputElement\r\n  const clearButton = document.getElementById('clear') as HTMLElement\r\n  const download = document.getElementById('download') as HTMLElement\r\n  const hiddenDownloadHelper = document.getElementById(\r\n    'downloader',\r\n  ) as HTMLAnchorElement\r\n\r\n  const setInput = (value: string | undefined) => {\r\n    if (value !== undefined) {\r\n      input.value = value\r\n      input.focus()\r\n      createQr()\r\n    }\r\n  }\r\n\r\n  const updateFromUrl = () => {\r\n    const query = new URL(window.location.href).searchParams.get('q')\r\n    if (query) setInput(query)\r\n  }\r\n\r\n  clearButton.addEventListener('click', () => {\r\n    setInput('')\r\n  })\r\n\r\n  canvas.addEventListener('click', () => {\r\n    canvas.style.maxWidth = canvas.style.maxWidth ? '' : '400px'\r\n  })\r\n\r\n  download.addEventListener('click', () => {\r\n    saveSvg(canvas, hiddenDownloadHelper)\r\n  })\r\n\r\n  const createQr = () => {\r\n    const value = input.value\r\n    if (value.length > 0) {\r\n      try {\r\n        render(canvas, getMatrix(value))\r\n      } catch (error) {\r\n        clear(canvas)\r\n        alert('The input was too long for QR!')\r\n      }\r\n    } else {\r\n      clear(canvas)\r\n    }\r\n  }\r\n\r\n  input.addEventListener('input', debounce(createQr, 100))\r\n  setInput('')\r\n  updateFromUrl()\r\n  window.addEventListener('locationchange', updateFromUrl)\r\n  ;[...document.querySelectorAll('#template-container a')].forEach((a) => {\r\n    let item = a as HTMLElement\r\n    if (item.dataset.template) {\r\n      item.addEventListener('click', () => {\r\n        setInput(item.dataset.template)\r\n      })\r\n    }\r\n  })\r\n}\r\n"]}