{"mappings":"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","sources":["./src/qr/definitions.ts","./src/qr/parameters.ts","./src/qr/utilities.ts","./src/qr/errorCorrection/galoisField.ts","./src/qr/errorCorrection/reedSolomon.ts","./src/qr/encoding/encoder.ts","./src/qr/encoding/alphanumericEncoder.ts","./src/qr/encoding/byteEncoder.ts","./src/qr/encoding/numericEncoder.ts","./src/qr/modulePlacement/applyMasking.ts","./src/qr/modulePlacement/applyPatterns.ts","./src/qr/modulePlacement/placeModules.ts","./src/qr/modulePlacement/applyInfo.ts","./src/qr/matrixGenerator.ts","./src/qr/encoding/encoderFactory.ts","./src/qr/renderer.ts","./src/index.ts"],"sourcesContent":["import { QrModes } from './parameters'\r\n\r\nexport enum EcLevels {\r\n  L = 0,\r\n  M = 1,\r\n  Q = 2,\r\n  H = 3,\r\n}\r\n\r\n//interleaved data --> ecPerBlock, wordsPerBlock\r\nconst qrDefinitionTable = [\r\n  7,\r\n  19,\r\n  10,\r\n  16,\r\n  13,\r\n  13,\r\n  17,\r\n  9,\r\n  10,\r\n  34,\r\n  16,\r\n  28,\r\n  22,\r\n  22,\r\n  28,\r\n  16,\r\n  15,\r\n  55,\r\n  26,\r\n  44,\r\n  18,\r\n  17,\r\n  22,\r\n  13,\r\n  20,\r\n  80,\r\n  18,\r\n  32,\r\n  26,\r\n  24,\r\n  16,\r\n  9,\r\n  26,\r\n  108,\r\n  24,\r\n  43,\r\n  18,\r\n  15,\r\n  22,\r\n  11,\r\n  18,\r\n  68,\r\n  16,\r\n  27,\r\n  24,\r\n  19,\r\n  28,\r\n  15,\r\n  20,\r\n  78,\r\n  18,\r\n  31,\r\n  18,\r\n  14,\r\n  26,\r\n  13,\r\n  24,\r\n  97,\r\n  22,\r\n  38,\r\n  22,\r\n  18,\r\n  26,\r\n  14,\r\n  30,\r\n  116,\r\n  22,\r\n  36,\r\n  20,\r\n  16,\r\n  24,\r\n  12,\r\n  18,\r\n  68,\r\n  26,\r\n  43,\r\n  24,\r\n  19,\r\n  28,\r\n  15,\r\n  20,\r\n  81,\r\n  30,\r\n  50,\r\n  28,\r\n  22,\r\n  24,\r\n  12,\r\n  24,\r\n  92,\r\n  22,\r\n  36,\r\n  26,\r\n  20,\r\n  28,\r\n  14,\r\n  26,\r\n  107,\r\n  22,\r\n  37,\r\n  24,\r\n  20,\r\n  22,\r\n  11,\r\n  30,\r\n  115,\r\n  24,\r\n  40,\r\n  20,\r\n  16,\r\n  24,\r\n  12,\r\n  22,\r\n  87,\r\n  24,\r\n  41,\r\n  30,\r\n  24,\r\n  24,\r\n  12,\r\n  24,\r\n  98,\r\n  28,\r\n  45,\r\n  24,\r\n  19,\r\n  30,\r\n  15,\r\n  28,\r\n  107,\r\n  28,\r\n  46,\r\n  28,\r\n  22,\r\n  28,\r\n  14,\r\n  30,\r\n  120,\r\n  26,\r\n  43,\r\n  28,\r\n  22,\r\n  28,\r\n  14,\r\n  28,\r\n  113,\r\n  26,\r\n  44,\r\n  26,\r\n  21,\r\n  26,\r\n  13,\r\n  28,\r\n  107,\r\n  26,\r\n  41,\r\n  30,\r\n  24,\r\n  28,\r\n  15,\r\n  28,\r\n  116,\r\n  26,\r\n  42,\r\n  28,\r\n  22,\r\n  30,\r\n  16,\r\n  28,\r\n  111,\r\n  28,\r\n  46,\r\n  30,\r\n  24,\r\n  24,\r\n  13,\r\n  30,\r\n  121,\r\n  28,\r\n  47,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  117,\r\n  28,\r\n  45,\r\n  30,\r\n  24,\r\n  30,\r\n  16,\r\n  26,\r\n  106,\r\n  28,\r\n  47,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  28,\r\n  114,\r\n  28,\r\n  46,\r\n  28,\r\n  22,\r\n  30,\r\n  16,\r\n  30,\r\n  122,\r\n  28,\r\n  45,\r\n  30,\r\n  23,\r\n  30,\r\n  15,\r\n  30,\r\n  117,\r\n  28,\r\n  45,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  116,\r\n  28,\r\n  45,\r\n  30,\r\n  23,\r\n  30,\r\n  15,\r\n  30,\r\n  115,\r\n  28,\r\n  47,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  115,\r\n  28,\r\n  46,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  115,\r\n  28,\r\n  46,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  115,\r\n  28,\r\n  46,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  115,\r\n  28,\r\n  46,\r\n  30,\r\n  24,\r\n  30,\r\n  16,\r\n  30,\r\n  121,\r\n  28,\r\n  47,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  121,\r\n  28,\r\n  47,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  122,\r\n  28,\r\n  46,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  122,\r\n  28,\r\n  46,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  117,\r\n  28,\r\n  47,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n  30,\r\n  118,\r\n  28,\r\n  47,\r\n  30,\r\n  24,\r\n  30,\r\n  15,\r\n]\r\n\r\nexport function getDimensions(version: number) {\r\n  return (version - 1) * 4 + 21\r\n}\r\n\r\nfunction getSupportedBits(version: number) {\r\n  const dimensions = getDimensions(version)\r\n  const versionInfoModules = version >= 7 ? 36 : 0\r\n  const alignmentElementsDimensions = 2 + Math.floor(version / 7)\r\n  const alignmentModules =\r\n    version <= 1\r\n      ? 0\r\n      : (Math.pow(alignmentElementsDimensions, 2) - 3) * 25 -\r\n        (alignmentElementsDimensions - 2) * 10\r\n  const bits =\r\n    dimensions * dimensions -\r\n    (49 + 15) * 3 -\r\n    (dimensions - 14) * 2 -\r\n    27 -\r\n    alignmentModules -\r\n    versionInfoModules\r\n\r\n  return bits\r\n}\r\n\r\nexport function getSupportedBytes(version: number) {\r\n  return Math.floor(getSupportedBits(version) / 8)\r\n}\r\n\r\nexport function getRemainderBits(version: number) {\r\n  const bits = getSupportedBits(version)\r\n  return bits % 8\r\n}\r\n\r\nexport function getAlignmentPattern(version: number) {\r\n  if (version <= 1) return []\r\n  const last = 18 + 4 * (version - 2)\r\n  const elements = 2 + Math.floor(version / 7)\r\n  const startStep = Math.floor((last - 6) / (elements - 1))\r\n  let firstStep = startStep\r\n  let nextStep = startStep\r\n  if (elements > 3) {\r\n    for (firstStep = startStep; firstStep > 0; firstStep--) {\r\n      nextStep = (last - 6 - firstStep) / (elements - 2)\r\n      if (nextStep % 2 == 0) break\r\n    }\r\n  }\r\n\r\n  const alignmentPattern = [6, 6 + firstStep]\r\n  for (let i = 1; i < elements - 1; i++)\r\n    alignmentPattern.push(6 + firstStep + i * nextStep)\r\n\r\n  return alignmentPattern\r\n}\r\n\r\nexport function getGroups(version: number, ecLevel: EcLevels) {\r\n  const index = (version - 1) * 8 + ecLevel * 2\r\n  let ecPerBlock = qrDefinitionTable[index]\r\n  let wordsPerBlock = qrDefinitionTable[index + 1]\r\n\r\n  let bytes = getSupportedBytes(version)\r\n  let y = 0\r\n  let x = 0\r\n  for (x = 0; x <= 56; x++) {\r\n    let candidate =\r\n      (bytes - (ecPerBlock + wordsPerBlock) * x) /\r\n      (ecPerBlock + wordsPerBlock + 1)\r\n\r\n    if (candidate % 1 === 0) {\r\n      y = candidate\r\n      break\r\n    }\r\n  }\r\n  const result = [{ blocks: x, wordsPerBlock, ecPerBlock }]\r\n  if (y > 0) {\r\n    result.push({ blocks: y, wordsPerBlock: wordsPerBlock + 1, ecPerBlock })\r\n  }\r\n  return result\r\n}\r\n\r\nexport function getChracterCountBits(version: number, mode: QrModes) {\r\n  let block =\r\n    version >= 1 && version <= 9\r\n      ? 0\r\n      : version >= 10 && version <= 26\r\n      ? 1\r\n      : version >= 27 && version <= 40\r\n      ? 2\r\n      : -1\r\n\r\n  if (block < 0) {\r\n    throw new Error(`Invalid version: ${version}`)\r\n  }\r\n\r\n  switch (mode) {\r\n    case QrModes.Numeric:\r\n      return 10 + block * 2\r\n    case QrModes.Alphanumeric:\r\n      return 9 + block * 2\r\n    case QrModes.Byte:\r\n      return Math.min(8 + block * 8, 16)\r\n    case QrModes.Kanji:\r\n      return 8 + block * 2\r\n    default:\r\n      throw new Error(`Invalid mode: ${mode}`)\r\n  }\r\n}\r\n\r\nexport function getRequiredNumberOfBits(groups) {\r\n  return (\r\n    groups.reduce((acc, val) => acc + val.wordsPerBlock * val.blocks, 0) * 8\r\n  )\r\n}\r\n","import {\r\n  EcLevels,\r\n  getAlignmentPattern,\r\n  getChracterCountBits,\r\n  getDimensions,\r\n  getGroups,\r\n  getRemainderBits,\r\n  getRequiredNumberOfBits,\r\n} from './definitions'\r\nexport type QrParameters = {\r\n  ecLevel: EcLevels\r\n  version: number\r\n  mode: QrModes\r\n  characterCountBits: number\r\n  requiredNumberOfBits: number\r\n  remainderBits: number\r\n  dimensions: number\r\n  alignmentPattern: number[]\r\n\r\n  groups: Array<{ blocks: number; wordsPerBlock: number; ecPerBlock: number }>\r\n}\r\n\r\nexport enum QrModes {\r\n  Numeric = 1,\r\n  Alphanumeric = 2,\r\n  Byte = 4,\r\n  Kanji = 8,\r\n  EXI = 7,\r\n}\r\n\r\nfunction getMode(content: string) {\r\n  if (/^\\d*$/.test(content)) return QrModes.Numeric\r\n  if (/^[0-9A-Z \\$%\\*\\+\\-\\.\\/:]*$/.test(content)) return QrModes.Alphanumeric\r\n  return QrModes.Byte\r\n}\r\n\r\nfunction getSmallestVersion(length: number, mode: QrModes) {\r\n  const ecLevel = EcLevels.L\r\n  let version, groups, requiredNumberOfBits, characterCountBits\r\n  for (version = 1; version <= 40; version++) {\r\n    groups = getGroups(version, ecLevel)\r\n    requiredNumberOfBits = getRequiredNumberOfBits(groups)\r\n    characterCountBits = getChracterCountBits(version, mode)\r\n    let upperLimit = 0\r\n    const availableBits = requiredNumberOfBits - (4 + characterCountBits)\r\n    switch (mode) {\r\n      case QrModes.Numeric:\r\n        upperLimit = Math.floor((availableBits / 10) * 3)\r\n        break\r\n      case QrModes.Alphanumeric:\r\n        upperLimit = Math.floor((availableBits / 11) * 2)\r\n        break\r\n      default:\r\n        upperLimit = Math.floor(availableBits / 8)\r\n        break\r\n    }\r\n\r\n    if (length <= upperLimit) break\r\n  }\r\n\r\n  if (version > 40) {\r\n    throw new Error('Input too long!')\r\n  }\r\n  return { version, ecLevel, groups, requiredNumberOfBits, characterCountBits }\r\n}\r\n\r\nexport function getParameters(content: string): QrParameters {\r\n  const mode = getMode(content)\r\n\r\n  const {\r\n    version,\r\n    ecLevel,\r\n    groups,\r\n    requiredNumberOfBits,\r\n    characterCountBits,\r\n  } = getSmallestVersion(content.length, mode)\r\n\r\n  return {\r\n    ecLevel,\r\n    version,\r\n    mode,\r\n    characterCountBits,\r\n    requiredNumberOfBits,\r\n    remainderBits: getRemainderBits(version),\r\n    dimensions: getDimensions(version),\r\n    alignmentPattern: getAlignmentPattern(version),\r\n    groups,\r\n  }\r\n}\r\n","export function chunkString(content: string, length: number): string[] {\r\n  const result: string[] = []\r\n  let i = 0\r\n  while (i * length < content.length)\r\n    result.push(content.substr(i++ * length, length))\r\n  return result\r\n}\r\n\r\nexport function get0s(count: number) {\r\n  let temp = ''\r\n  for (let i = 0; i < count; i++) {\r\n    temp += '0'\r\n  }\r\n  return temp\r\n}\r\n\r\nexport function pad0(content: string, length: number) {\r\n  const diff = length - content.length\r\n  return get0s(diff) + content\r\n}\r\n\r\nexport function numToBits(content: number, length: number) {\r\n  return pad0(content.toString(2), length)\r\n}\r\n\r\nexport function concatTypedArrays(a: Uint8Array, b: Uint8Array): Uint8Array {\r\n  const c = new Uint8Array(a.length + b.length)\r\n  c.set(a, 0)\r\n  c.set(b, a.length)\r\n  return c\r\n}\r\n\r\nexport function range(from: number, to: number): number[] {\r\n  return Array(to - from)\r\n    .fill(from)\r\n    .map((x, y) => x + y)\r\n}\r\nexport function createMatrix(dimensions: number): boolean[][] {\r\n  return [...new Array(dimensions)].map((arr) =>\r\n    [...new Array(dimensions)].fill(null),\r\n  )\r\n}\r\nexport function cloneMatrix(matrix: boolean[][]) {\r\n  return matrix.slice().map((m) => m.slice())\r\n}\r\nexport function mergeMatrices(\r\n  matrix1: boolean[][],\r\n  matrix2: boolean[][],\r\n): boolean[][] {\r\n  let result = cloneMatrix(matrix1)\r\n\r\n  for (let y = 0; y < matrix1.length; y++) {\r\n    for (let x = 0; x < matrix1[0].length; x++) {\r\n      if (matrix1[y][x] === null) {\r\n        result[y][x] = matrix2[y][x]\r\n      }\r\n    }\r\n  }\r\n  return result\r\n}\r\n\r\nexport enum MatrixIterationDirection {\r\n  Horizontal,\r\n  Vertical,\r\n}\r\nexport function iterateOverMatrix(\r\n  matrix: boolean[][],\r\n  fn: (value: boolean, x: number, y: number, matrix: boolean[][]) => void,\r\n  fnSecondary: (index: number, matrix: boolean[][]) => void = () => {},\r\n  direction = MatrixIterationDirection.Horizontal,\r\n) {\r\n  for (let y = 0; y < matrix.length; y++) {\r\n    for (let x = 0; x < matrix.length; x++) {\r\n      if (direction === MatrixIterationDirection.Horizontal)\r\n        fn(matrix[y][x], x, y, matrix)\r\n      else fn(matrix[x][y], y, x, matrix)\r\n    }\r\n    fnSecondary(y, matrix)\r\n  }\r\n}\r\n\r\nexport function debounce(fn: () => void, wait: number) {\r\n  let timer: number | undefined\r\n  return function () {\r\n    const later = () => {\r\n      timer = undefined\r\n      fn()\r\n    }\r\n    clearTimeout(timer)\r\n    timer = setTimeout(later, wait)\r\n  }\r\n}\r\n","function generateExponentsLookUpTable() {\r\n  const table = [1]\r\n  while (table.length < 256) {\r\n    const last = table[table.length - 1]\r\n    let next = last << 1\r\n    if (next > 255) next ^= 285\r\n\r\n    table.push(next)\r\n  }\r\n  return Object.assign({}, table)\r\n}\r\nfunction flip(obj: Object) {\r\n  const result = {}\r\n  Object.keys(obj).forEach((key) => (result[obj[key]] = +key))\r\n  return result\r\n}\r\n\r\nexport const exponents = generateExponentsLookUpTable()\r\nexport const logs = { ...flip(exponents), 1: 0 }\r\n\r\nfunction mul(x: number, y: number) {\r\n  if (x === 0 || y === 0) return 0\r\n  return exponents[(logs[x] + logs[y]) % 255]\r\n}\r\n\r\nfunction mulPoly(poly1: Uint8Array, poly2: number[]) {\r\n  const result: Uint8Array = new Uint8Array(poly1.length + poly2.length - 1)\r\n  poly1.forEach((p1, j) =>\r\n    poly2.forEach((p2, i) => (result[j + i] ^= mul(p2, p1))),\r\n  )\r\n\r\n  return result\r\n}\r\n\r\nexport function divPoly(dividend: Uint8Array, divisor: Uint8Array) {\r\n  let result = dividend.slice()\r\n  for (let i = 0; i < dividend.length - (divisor.length - 1); i++) {\r\n    let coef = result[i]\r\n    if (coef !== 0)\r\n      for (let j = 1; j < divisor.length; j++)\r\n        if (divisor[j] != 0) result[i + j] ^= mul(divisor[j], coef)\r\n  }\r\n\r\n  let remainder = result.slice(result.length - (divisor.length - 1))\r\n  return remainder\r\n}\r\n\r\nexport function generatorPoly(n: number) {\r\n  const pow = (x: number, power: number) => exponents[(logs[x] * power) % 255]\r\n  let g = Uint8Array.from([1])\r\n  for (let i = 0; i < n; i++) g = mulPoly(g, [1, pow(2, i)])\r\n\r\n  return g\r\n}\r\n","import { divPoly, generatorPoly } from './galoisField'\r\nimport { concatTypedArrays } from '../utilities'\r\nexport function getEcWords(\r\n  message: Uint8Array,\r\n  ecCodeWordsCount: number,\r\n): Uint8Array {\r\n  //pad\r\n  message = concatTypedArrays(message, new Uint8Array(ecCodeWordsCount))\r\n\r\n  const remainder = divPoly(message, generatorPoly(ecCodeWordsCount))\r\n  return remainder\r\n}\r\n","import { QrParameters } from '../parameters'\r\nimport {\r\n  chunkString,\r\n  numToBits,\r\n  pad0,\r\n  concatTypedArrays,\r\n  get0s,\r\n} from '../utilities'\r\nimport { getEcWords } from '../errorCorrection/reedSolomon'\r\nexport class Encoder {\r\n  protected config: QrParameters\r\n  constructor(config: QrParameters) {\r\n    this.config = config\r\n  }\r\n  encodeSymbols(content: string) {\r\n    return '1'\r\n  }\r\n\r\n  createBlocks(encodedData: Uint8Array) {\r\n    let currentElement = 0\r\n    return this.config.groups\r\n      .map((group) => {\r\n        const blocks = new Array(group.blocks)\r\n        for (let b = 0; b < blocks.length; b++) {\r\n          blocks[b] = new Uint8Array(group.wordsPerBlock)\r\n          for (let i = 0; i < group.wordsPerBlock; i++)\r\n            blocks[b][i] = encodedData[currentElement++]\r\n        }\r\n        return blocks\r\n      })\r\n      .flat()\r\n  }\r\n\r\n  interleave(blocks: Uint8Array[]) {\r\n    const maxLength = Math.max(...blocks.map((b) => b.length))\r\n    const sumLength = blocks.reduce((acc, val) => acc + val.length, 0)\r\n    const result = new Uint8Array(sumLength)\r\n    let count = 0\r\n    for (let i = 0; i < maxLength; i++)\r\n      for (let j = 0; j < blocks.length; j++)\r\n        if (i < blocks[j].length) result[count++] = blocks[j][i]\r\n\r\n    return result\r\n  }\r\n\r\n  encode(content: string) {\r\n    let encodedData = chunkString(\r\n      this.fillUpBits(this.prefix(content) + this.encodeSymbols(content)),\r\n      8,\r\n    )\r\n    let byteArray: Uint8Array = Uint8Array.from(\r\n      encodedData.map((el) => parseInt(el, 2)),\r\n    )\r\n\r\n    const blocks = this.createBlocks(byteArray)\r\n    const ecBlocks = blocks.map((b) =>\r\n      getEcWords(b, this.config.groups[0].ecPerBlock),\r\n    )\r\n    byteArray = this.interleave(blocks)\r\n    let ecByteArray = this.interleave(ecBlocks)\r\n\r\n    let bits =\r\n      Array.from(concatTypedArrays(byteArray, ecByteArray))\r\n        .map((uint) => numToBits(uint, 8))\r\n        .flat()\r\n        .join('') + this.suffix()\r\n\r\n    return bits\r\n  }\r\n\r\n  fillUpBits(bits: string) {\r\n    const diff = this.config.requiredNumberOfBits - bits.length\r\n    if (diff > 0) {\r\n      bits += get0s(Math.min(diff, 4)) //fill up to 0000\r\n      bits += get0s(8 - (bits.length % 8)) //fill up to be multiple of 8\r\n\r\n      while (bits.length < this.config.requiredNumberOfBits)\r\n        bits += '1110110000010001' //fill up until required number of bits\r\n\r\n      return bits.substr(0, this.config.requiredNumberOfBits)\r\n    }\r\n\r\n    throw new Error('encodedData larger than allowed number of bits')\r\n  }\r\n\r\n  prefix(content: string) {\r\n    let mode = numToBits(this.config.mode, 4)\r\n    let countIndicator = numToBits(\r\n      content.length,\r\n      this.config.characterCountBits,\r\n    )\r\n    return mode + countIndicator\r\n  }\r\n  suffix() {\r\n    return pad0('', this.config.remainderBits)\r\n  }\r\n}\r\n","import { Encoder } from './encoder'\r\nimport { chunkString, numToBits } from '../utilities'\r\nconst alphaNumericValueTable = (lookup: string) =>\r\n  [\r\n    '0',\r\n    '1',\r\n    '2',\r\n    '3',\r\n    '4',\r\n    '5',\r\n    '6',\r\n    '7',\r\n    '8',\r\n    '9',\r\n    'A',\r\n    'B',\r\n    'C',\r\n    'D',\r\n    'E',\r\n    'F',\r\n    'G',\r\n    'H',\r\n    'I',\r\n    'J',\r\n    'K',\r\n    'L',\r\n    'M',\r\n    'N',\r\n    'O',\r\n    'P',\r\n    'Q',\r\n    'R',\r\n    'S',\r\n    'T',\r\n    'U',\r\n    'V',\r\n    'W',\r\n    'X',\r\n    'Y',\r\n    'Z',\r\n    ' ',\r\n    '$',\r\n    '%',\r\n    '*',\r\n    '+',\r\n    '-',\r\n    '.',\r\n    '/',\r\n    ':',\r\n  ].indexOf(lookup)\r\n\r\nexport class AlphanumericEncoder extends Encoder {\r\n  encodeSymbols(content: string) {\r\n    return chunkString(content, 2)\r\n      .map(([first, last]) =>\r\n        last !== undefined\r\n          ? numToBits(\r\n              alphaNumericValueTable(first) * 45 + alphaNumericValueTable(last),\r\n              11,\r\n            )\r\n          : numToBits(alphaNumericValueTable(first), 6),\r\n      )\r\n      .join('')\r\n  }\r\n}\r\n","import { Encoder } from './encoder'\r\nimport { numToBits } from '../utilities'\r\n\r\nexport class ByteEncoder extends Encoder {\r\n  encodeSymbols(content: string) {\r\n    return content\r\n      .split('')\r\n      .map((char) => numToBits(char.charCodeAt(0), 8))\r\n      .join('')\r\n  }\r\n}\r\n","import { Encoder } from './encoder'\r\nimport { chunkString, numToBits } from '../utilities'\r\n\r\nexport class NumericEncoder extends Encoder {\r\n  encodeSymbols(content: string) {\r\n    return chunkString(content, 3)\r\n      .map((num) => numToBits(+num, +num < 10 ? 4 : +num < 100 ? 7 : 10))\r\n      .join('')\r\n  }\r\n}\r\n","import {\r\n  cloneMatrix,\r\n  iterateOverMatrix,\r\n  MatrixIterationDirection,\r\n  mergeMatrices,\r\n  range,\r\n} from '../utilities'\r\n\r\nfunction getLineGroupScore(matrix: boolean[][]) {\r\n  let score = 0\r\n  let currentColor = false\r\n  let currentRun = 0\r\n\r\n  const scoreLineGroupCondition = () => {\r\n    score += currentRun >= 5 ? 3 + Math.max(0, currentRun - 5) : 0\r\n    currentRun = 0\r\n  }\r\n\r\n  Object.values(MatrixIterationDirection).forEach((dir) => {\r\n    iterateOverMatrix(\r\n      matrix,\r\n      (value) => {\r\n        if (value !== currentColor) {\r\n          scoreLineGroupCondition()\r\n          currentColor = value\r\n        }\r\n        currentRun++\r\n      },\r\n      scoreLineGroupCondition,\r\n      dir as MatrixIterationDirection,\r\n    )\r\n  })\r\n  return score\r\n}\r\n\r\nfunction getSquareScore(matrix: boolean[][]) {\r\n  let score = 0\r\n\r\n  iterateOverMatrix(matrix, (_, x, y) => {\r\n    if (x < matrix.length - 1 && y < matrix.length - 1) {\r\n      const squareBitMask = range(0, 4).reduce(\r\n        //get current, right, bottom and bottom-right module and merge them to a bitmask\r\n        (acc, dirBitMask, i) =>\r\n          acc | (+matrix[y + (dirBitMask >> 1)][x + (dirBitMask & 0b01)] << i),\r\n        0,\r\n      )\r\n      const isSquare = squareBitMask === 0 || squareBitMask === 15\r\n      score += isSquare ? 3 : 0\r\n    }\r\n  })\r\n  return score\r\n}\r\n\r\nfunction getFinderConfusionScore(matrix: boolean[][]) {\r\n  const [d, w] = [true, false]\r\n  const template = [d, w, d, d, d, w, d, w, w, w, w]\r\n  const patterns = [\r\n    { template, current: 0 },\r\n    { template: template.slice().reverse(), current: 0 },\r\n  ]\r\n\r\n  let score = 0\r\n  const evaluateFinderConfusionCondition = (value: boolean) => {\r\n    patterns.forEach((pattern) => {\r\n      pattern.current +=\r\n        value === pattern.template[pattern.current] ? 1 : -pattern.current\r\n      if (pattern.current >= pattern.template.length) {\r\n        score += 40\r\n        pattern.current = 0\r\n      }\r\n    })\r\n  }\r\n\r\n  Object.values(MatrixIterationDirection).forEach((dir) => {\r\n    iterateOverMatrix(\r\n      matrix,\r\n      (value) => evaluateFinderConfusionCondition(value),\r\n      () => patterns.forEach((pattern) => (pattern.current = 0)),\r\n      dir as MatrixIterationDirection,\r\n    )\r\n  })\r\n  return score\r\n}\r\n\r\nfunction getColorImbalanceScore(matrix: boolean[][]) {\r\n  const totalCount = matrix.length * matrix.length\r\n  let darkCount = 0\r\n  iterateOverMatrix(matrix, (value) => (darkCount += value ? 1 : 0))\r\n\r\n  const percentage = +((darkCount / totalCount) * 100).toFixed(0)\r\n  const lower = percentage - (percentage & 5)\r\n  const higher = lower + 5\r\n  let score =\r\n    Math.min(...[lower, higher].map((el) => Math.abs(el - 50) / 5)) * 10\r\n\r\n  return score\r\n}\r\n\r\nfunction evaluateMasking(matrix: boolean[][]) {\r\n  return [\r\n    getLineGroupScore,\r\n    getSquareScore,\r\n    getFinderConfusionScore,\r\n    getColorImbalanceScore,\r\n  ]\r\n    .map((fn) => fn(matrix))\r\n    .reduce((acc, val) => acc + val, 0)\r\n}\r\n\r\nexport function applyMasking(\r\n  functionalMatrix: boolean[][],\r\n  dataMatrix: boolean[][],\r\n) {\r\n  const maskMatrix = (\r\n    matrix: boolean[][],\r\n    condition: { (x: any, y: any): boolean; (arg0: number, arg1: number): any },\r\n  ) => {\r\n    const copy = cloneMatrix(matrix)\r\n    iterateOverMatrix(copy, (value, x, y) => {\r\n      if (condition(x, y)) copy[y][x] = !value\r\n    })\r\n    return copy\r\n  }\r\n\r\n  const maskingMethods: Array<(x: number, y: number) => boolean> = [\r\n    (x, y) => (x + y) % 2 === 0,\r\n    (x, y) => y % 2 === 0,\r\n    (x, y) => x % 3 === 0,\r\n    (x, y) => (x + y) % 3 === 0,\r\n    (x, y) => (Math.floor(y / 2) + Math.floor(x / 3)) % 2 === 0,\r\n    (x, y) => ((x * y) % 2) + ((x * y) % 3) === 0,\r\n    (x, y) => (((x * y) % 2) + ((x * y) % 3)) % 2 === 0,\r\n    (x, y) => (((x + y) % 2) + ((x * y) % 3)) % 2 === 0,\r\n  ]\r\n\r\n  return maskingMethods\r\n    .map((method) =>\r\n      mergeMatrices(functionalMatrix, maskMatrix(dataMatrix, method)),\r\n    )\r\n    .reduce(\r\n      //find the matrix with lowest score\r\n      (acc, matrix, mask) => {\r\n        const score = evaluateMasking(matrix)\r\n        return score < acc.score ? { score, mask, matrix } : acc\r\n      },\r\n      { score: Number.POSITIVE_INFINITY, mask: 0, matrix: [] as boolean[][] },\r\n    )\r\n}\r\n","import { QrParameters } from '../parameters'\r\nimport { createMatrix, range } from '../utilities'\r\n\r\nfunction applyFinderPatterns(matrix: boolean[][]) {\r\n  const dimensions = matrix.length\r\n  const drawSquares = (x: number, y: number) => {\r\n    for (let j = 0; j < 3; j++)\r\n      for (let i = 0 + j; i < 7 - j; i++)\r\n        matrix[y + j][x + i] = matrix[y + 6 - j][x + i] = matrix[y + i][\r\n          x + j\r\n        ] = matrix[y + i][x + 6 - j] = j % 2 == 0\r\n\r\n    matrix[y + 3][x + 3] = true\r\n  }\r\n\r\n  const drawGapNextToSquares = () => {\r\n    for (let i = 0; i < 8; i++)\r\n      matrix[i][7] = matrix[dimensions - i - 1][7] = matrix[7][i] = matrix[7][\r\n        dimensions - i - 1\r\n      ] = matrix[dimensions - 7 - 1][i] = matrix[i][dimensions - 7 - 1] = false\r\n  }\r\n\r\n  drawSquares(0, 0)\r\n  drawSquares(0, dimensions - 7)\r\n  drawSquares(dimensions - 7, 0)\r\n  drawGapNextToSquares()\r\n}\r\n\r\nfunction applyTimingPatterns(matrix: boolean[][]) {\r\n  for (let i = 7; i < matrix.length - 7; i++)\r\n    matrix[6][i] = matrix[i][6] = i % 2 === 0\r\n}\r\n\r\nfunction applyDarkModule(matrix: boolean[][]) {\r\n  matrix[matrix.length - 8][8] = true\r\n}\r\n\r\nfunction applyReservedAreas(version: number, matrix: boolean[][]) {\r\n  const dimensions = matrix.length\r\n  ;[...range(0, 9), ...range(dimensions - 8, dimensions)].forEach(\r\n    (i) => (matrix[i][8] = matrix[8][i] = false),\r\n  )\r\n\r\n  //for version >=7 codes add additional areas\r\n  if (version >= 7)\r\n    for (let i = 0; i < 3; i++)\r\n      for (let j = 0; j < 6; j++)\r\n        matrix[dimensions - 11 + i][j] = matrix[j][dimensions - 11 + i] = false\r\n}\r\n\r\nfunction applyAlignmentPatterns(locations: number[], matrix: boolean[][]) {\r\n  const drawPattern = (x: number, y: number) => {\r\n    for (let j = 0; j < 3; j++)\r\n      for (let i = 0 + j; i < 5 - j; i++)\r\n        matrix[y + j][x + i] = matrix[y + 4 - j][x + i] = matrix[y + i][\r\n          x + j\r\n        ] = matrix[y + i][x + 4 - j] = j % 2 == 0\r\n  }\r\n\r\n  const [minLocation, maxLocation] = [\r\n    Math.min(...locations),\r\n    Math.max(...locations),\r\n  ]\r\n  locations\r\n    .map((x, i, array) => array.map((y) => [x, y])) //all coordinate combinations\r\n    .flat()\r\n    .filter(\r\n      //do not draw if it overlaps the finder patterns\r\n      ([x, y]) =>\r\n        !(\r\n          (x === minLocation && (y === minLocation || y === maxLocation)) ||\r\n          (y === minLocation && (x === minLocation || x === maxLocation))\r\n        ),\r\n    ) //add -2 offset, as location-coordinates use center, while we use top-left\r\n    .map(([x, y]) => [x - 2, y - 2])\r\n    .forEach(([x, y]) => drawPattern(x, y))\r\n}\r\n\r\nexport function getPatternMatrix(config: QrParameters) {\r\n  let patternMatrix = createMatrix(config.dimensions)\r\n  applyFinderPatterns(patternMatrix)\r\n  applyAlignmentPatterns(config.alignmentPattern, patternMatrix)\r\n  applyReservedAreas(config.version, patternMatrix)\r\n  applyTimingPatterns(patternMatrix)\r\n  applyDarkModule(patternMatrix)\r\n  return patternMatrix\r\n}\r\n","import { QrParameters } from '../parameters'\r\nimport { createMatrix } from '../utilities'\r\nimport { applyMasking } from './applyMasking'\r\nimport { getPatternMatrix } from './applyPatterns'\r\nimport {\r\n  applyFormatInformation,\r\n  applyVerisonInformation as applyVersionInformation,\r\n} from './applyInfo'\r\nenum MoveDirection {\r\n  Up = -1,\r\n  Down = 1,\r\n}\r\n\r\nfunction applyData(patternMatrix: boolean[][], data: string) {\r\n  let dataMatrix = createMatrix(patternMatrix.length)\r\n  const MAX = patternMatrix.length - 1\r\n  let x = MAX\r\n  let dx = 0\r\n  let y = MAX\r\n  let d = 0\r\n  let direction: MoveDirection = MoveDirection.Up\r\n\r\n  while (d < data.length) {\r\n    if (patternMatrix[y][x - dx] === null)\r\n      //only empty fields, otherwise skip\r\n      dataMatrix[y][x - dx] = data[d++] === '1'\r\n\r\n    if (dx === 1) {\r\n      y += direction //go up or down\r\n      if (y < 0 || y > MAX) {\r\n        //flip direction if reaching top or bottom, move column to left\r\n        y = (MAX + MAX * direction) / 2\r\n        direction *= -1\r\n        x -= 2\r\n      }\r\n    }\r\n    dx ^= 1 //alternate from right to left in each column\r\n\r\n    if (x >= 6 && x <= 7)\r\n      //next to vertical timing pattern? -> skip\r\n      x = 5\r\n  }\r\n  return dataMatrix\r\n}\r\n\r\nexport function place(config: QrParameters, data: string) {\r\n  let patternMatrix = getPatternMatrix(config)\r\n  let dataMatrix = applyData(patternMatrix, data)\r\n  let { mask, matrix } = applyMasking(patternMatrix, dataMatrix)\r\n  let result = applyFormatInformation(config, mask, matrix)\r\n  result = applyVersionInformation(config, matrix)\r\n\r\n  return result\r\n}\r\n","import { divPoly } from '../errorCorrection/galoisField'\r\nimport { QrParameters } from '../parameters'\r\nimport { get0s, numToBits, pad0, range } from '../utilities'\r\n\r\nexport function applyFormatInformation(\r\n  config: QrParameters,\r\n  mask: number,\r\n  matrix: boolean[][],\r\n) {\r\n  let bits = ['01', '00', '11', '10'][config.ecLevel]\r\n  bits += numToBits(mask, 3)\r\n\r\n  const bits10 = (bits + get0s(10)).split('').map((el) => +el)\r\n\r\n  const generator = Uint8Array.from([1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1])\r\n  const message = Uint8Array.from(bits10)\r\n  const remainder = divPoly(message, generator).join('')\r\n\r\n  bits += pad0(remainder, 10)\r\n  const formatInfo = numToBits(parseInt(bits, 2) ^ 21522, 15)\r\n\r\n  const horizontal = [\r\n    ...range(0, 8 + 1),\r\n    ...range(matrix.length - 7, matrix.length),\r\n  ]\r\n\r\n  const vertical = horizontal.slice().reverse()\r\n  let j = 0\r\n  horizontal.forEach(\r\n    (h) => (matrix[8][h] = h !== 6 ? formatInfo[j++] === '1' : matrix[8][h]),\r\n  )\r\n  j = 0\r\n  vertical.forEach(\r\n    (v) =>\r\n      (matrix[v][8] =\r\n        v !== 6 && v !== matrix.length - 8\r\n          ? formatInfo[j++] === '1'\r\n          : matrix[v][8]),\r\n  )\r\n\r\n  return matrix\r\n}\r\n\r\nexport function applyVerisonInformation(\r\n  config: QrParameters,\r\n  matrix: boolean[][],\r\n) {\r\n  if (config.version < 7) return matrix\r\n  const generator = Uint8Array.from([1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1])\r\n  const bits = numToBits(config.version, 6)\r\n  const bits10 = (bits + get0s(12)).split('').map((el) => +el)\r\n  const message = Uint8Array.from(bits10)\r\n  const remainder = divPoly(message, generator).join('')\r\n  const versionInfo = bits + pad0(remainder, 12)\r\n\r\n  let d = 0\r\n\r\n  for (let x = 0; x < 6; x++)\r\n    for (let y = 0; y < 3; y++)\r\n      matrix[matrix.length - 9 - y][5 - x] = matrix[5 - x][\r\n        matrix.length - 9 - y\r\n      ] = versionInfo[d++] === '1'\r\n\r\n  return matrix\r\n}\r\n","import { getParameters } from './parameters'\r\nimport { EncoderFactory } from './encoding/encoderFactory'\r\nimport { place } from './modulePlacement/placeModules'\r\n\r\nexport default function getMatrix(content: string) {\r\n  const config = getParameters(content)\r\n  let bitString = EncoderFactory(config).encode(content)\r\n  return place(config, bitString)\r\n}\r\n","import { QrModes, QrParameters } from '../parameters'\r\nimport { AlphanumericEncoder } from './alphanumericEncoder'\r\nimport { ByteEncoder } from './byteEncoder'\r\nimport { NumericEncoder } from './numericEncoder'\r\nexport function EncoderFactory(config: QrParameters) {\r\n  switch (config.mode) {\r\n    case QrModes.Alphanumeric:\r\n      return new AlphanumericEncoder(config)\r\n    case QrModes.Numeric:\r\n      return new NumericEncoder(config)\r\n    //nope, Kanji support does not seem reasonable as it wopuld require to add Shift JIS support for the mapping\r\n    //just use utf8\r\n    default:\r\n      return new ByteEncoder(config)\r\n  }\r\n}\r\n","interface Position {\r\n  x: number\r\n  y: number\r\n}\r\nfunction createElement(tag: string) {\r\n  return document.createElementNS('http://www.w3.org/2000/svg', tag)\r\n}\r\n\r\nconst debug = true\r\nfunction createRectTemplate() {\r\n  let rect = createElement('rect')\r\n\r\n  rect.setAttribute('width', '1')\r\n  rect.setAttribute('height', '1')\r\n\r\n  return rect\r\n}\r\nconst rectTemplate = createRectTemplate()\r\n\r\nfunction createRect(container: DocumentFragment, position: Position) {\r\n  const rect = rectTemplate.cloneNode(false) as SVGElement\r\n  rect.setAttribute('x', position.x.toString())\r\n  rect.setAttribute('y', position.y.toString())\r\n\r\n  container.appendChild(rect)\r\n}\r\n\r\nexport function render(canvas: SVGSVGElement, matrix: boolean[][]) {\r\n  canvas.innerHTML = ''\r\n  canvas.setAttribute(\r\n    'viewBox',\r\n    `0 0 ${matrix[0].length || 10} ${matrix.length}`,\r\n  )\r\n  const g = createElement('g')\r\n  g.setAttribute('fill', '#000')\r\n  g.setAttribute('shape-rendering', 'crispEdges')\r\n\r\n  const fragment = document.createDocumentFragment()\r\n  for (let y = 0; y < matrix.length; y++) {\r\n    for (let x = 0; x < matrix[y].length; x++) {\r\n      if (matrix[y][x] === true) {\r\n        createRect(fragment, { x, y })\r\n      }\r\n    }\r\n  }\r\n  g.appendChild(fragment)\r\n  canvas.appendChild(g)\r\n}\r\n\r\nexport function clear(canvas: SVGSVGElement) {\r\n  canvas.innerHTML = ''\r\n}\r\n","import getMatrix from './qr/matrixGenerator'\r\nimport { render, clear } from './qr/renderer'\r\nimport { debounce } from './qr/utilities'\r\n\r\ntry {\r\n  //@ts-ignore\r\n  module.hot.accept()\r\n} catch (error) {}\r\n\r\nwindow.onload = () => {\r\n  const canvas = document.querySelector('svg') as SVGSVGElement\r\n  const input = document.getElementById('input') as HTMLInputElement\r\n  const pasteButton = document.getElementById('paste') as HTMLElement\r\n  const clearButton = document.getElementById('clear') as HTMLElement\r\n\r\n  const setInput = (value: string) => {\r\n    input.value = value\r\n    input.focus()\r\n    createQr()\r\n  }\r\n  clearButton.addEventListener('click', () => {\r\n    setInput('')\r\n  })\r\n\r\n  if (\r\n    navigator.clipboard !== undefined &&\r\n    navigator.clipboard.readText !== undefined\r\n  ) {\r\n    pasteButton.addEventListener('click', async () => {\r\n      setInput(await navigator.clipboard.readText())\r\n    })\r\n  } else {\r\n    pasteButton.style.display = 'none'\r\n  }\r\n\r\n  const createQr = () => {\r\n    const value = input.value\r\n    if (value.length > 0) {\r\n      try {\r\n        render(canvas, getMatrix(value))\r\n      } catch (error) {\r\n        clear(canvas)\r\n        alert('The input was too long for QR!')\r\n      }\r\n    } else {\r\n      clear(canvas)\r\n    }\r\n  }\r\n\r\n  input.addEventListener('input', debounce(createQr, 100))\r\n  setInput('')\r\n\r\n  const query = new URL(window.location.href).searchParams.get('q')\r\n  if (query) setInput(query)\r\n}\r\n"],"names":["EcLevels","qrDefinitionTable","getDimensions","version","getSupportedBits","dimensions","versionInfoModules","alignmentElementsDimensions","Math","floor","pow","getRemainderBits","getAlignmentPattern","last","elements","startStep","firstStep","nextStep","alignmentPattern","i","push","getGroups","ecLevel","index","ecPerBlock","wordsPerBlock","bytes","getSupportedBytes","y","x","candidate","result","blocks","getChracterCountBits","mode","block","Error","concat","$aecd1cff7f0184b513e1e3ede1e$export$QrModes","Numeric","Alphanumeric","Byte","min","Kanji","getRequiredNumberOfBits","groups","reduce","acc","val","QrModes","getParameters","content","test","getMode","requiredNumberOfBits","characterCountBits","length","$db896d483fe4c781cdc6eed6967935$export$EcLevels","L","$db896d483fe4c781cdc6eed6967935$export$getGroups","$db896d483fe4c781cdc6eed6967935$export$getRequiredNumberOfBits","$db896d483fe4c781cdc6eed6967935$export$getChracterCountBits","upperLimit","availableBits","getSmallestVersion","remainderBits","$db896d483fe4c781cdc6eed6967935$export$getRemainderBits","$db896d483fe4c781cdc6eed6967935$export$getDimensions","$db896d483fe4c781cdc6eed6967935$export$getAlignmentPattern","chunkString","substr","get0s","count","temp","pad0","numToBits","toString","concatTypedArrays","a","b","c","Uint8Array","set","range","from","to","Array","fill","map","createMatrix","arr","cloneMatrix","matrix","slice","m","MatrixIterationDirection","iterateOverMatrix","fn","fnSecondary","direction","Horizontal","exponents","table","next","Object","assign","generateExponentsLookUpTable","logs","$b0f57bc002426478ba2b85410e021d79$var$_objectSpread","obj","keys","forEach","key","flip","1","mul","mulPoly","poly1","poly2","p1","j","p2","divPoly","dividend","divisor","coef","getEcWords","message","ecCodeWordsCount","$b0f57bc002426478ba2b85410e021d79$export$divPoly","$ce9b7eec21a1fd35b54afd61a4a5b21$export$concatTypedArrays","n","g","power","$b0f57bc002426478ba2b85410e021d79$export$generatorPoly","Encoder","constructor","config","this","encodeSymbols","createBlocks","encodedData","currentElement","group","flat","interleave","maxLength","max","sumLength","encode","$ce9b7eec21a1fd35b54afd61a4a5b21$export$chunkString","fillUpBits","prefix","byteArray","el","parseInt","ecBlocks","$a5a8d46d795d430301b0b14c8c514$export$getEcWords","ecByteArray","uint","$ce9b7eec21a1fd35b54afd61a4a5b21$export$numToBits","join","suffix","bits","diff","$ce9b7eec21a1fd35b54afd61a4a5b21$export$get0s","$ce9b7eec21a1fd35b54afd61a4a5b21$export$pad0","alphaNumericValueTable","lookup","indexOf","AlphanumericEncoder","$d5dbb84fc020038da1c52bf408d77d$export$Encoder","first","undefined","ByteEncoder","split","char","charCodeAt","NumericEncoder","num","getLineGroupScore","score","currentColor","currentRun","scoreLineGroupCondition","values","$ce9b7eec21a1fd35b54afd61a4a5b21$export$MatrixIterationDirection","dir","$ce9b7eec21a1fd35b54afd61a4a5b21$export$iterateOverMatrix","value","getSquareScore","_","squareBitMask","$ce9b7eec21a1fd35b54afd61a4a5b21$export$range","dirBitMask","getFinderConfusionScore","d","w","template","patterns","current","reverse","pattern","evaluateFinderConfusionCondition","getColorImbalanceScore","totalCount","darkCount","percentage","toFixed","lower","higher","abs","applyMasking","functionalMatrix","dataMatrix","method","matrix1","matrix2","$ce9b7eec21a1fd35b54afd61a4a5b21$export$mergeMatrices","condition","copy","$ce9b7eec21a1fd35b54afd61a4a5b21$export$cloneMatrix","maskMatrix","mask","evaluateMasking","Number","POSITIVE_INFINITY","applyAlignmentPatterns","locations","minLocation","maxLocation","array","filter","drawPattern","getPatternMatrix","patternMatrix","$ce9b7eec21a1fd35b54afd61a4a5b21$export$createMatrix","drawSquares","drawGapNextToSquares","applyFinderPatterns","applyReservedAreas","applyTimingPatterns","MoveDirection","place","data","$ad86e8e0751448bfe78c5725bbbaf5e$export$getPatternMatrix","MAX","dx","Up","applyData","$c920579ec9299f75a299d2473ff3e3e$export$applyMasking","bits10","generator","formatInfo","horizontal","vertical","h","v","$f2150e325d4f1e754b4553710e18578c$export$applyFormatInformation","versionInfo","$f2150e325d4f1e754b4553710e18578c$export$applyVerisonInformation","getMatrix","$aecd1cff7f0184b513e1e3ede1e$export$getParameters","$be17d05e809c1d6645e30fbbc1ea45$export$place","$dbda71f5463ff0f819a445c29af0df0e$export$AlphanumericEncoder","$fe47debc6e900196366d0a70f253d1$export$NumericEncoder","$a9aac5a76889e8bb98510fed75ef9461$export$ByteEncoder","$bf961d2c6fcbbba2fb335b0a34991cb2$export$EncoderFactory","createElement","tag","document","createElementNS","rectTemplate","rect","setAttribute","createRectTemplate","createRect","container","position","cloneNode","appendChild","clear","canvas","innerHTML","accept","error","window","onload","querySelector","input","getElementById","pasteButton","clearButton","setInput","focus","createQr","addEventListener","navigator","clipboard","readText","async","style","display","fragment","createDocumentFragment","$d48c6a641f9a91b197efcec57d0c76$export$render","$c01d9e2ef08039f80bc3c0992903$export$default","$d48c6a641f9a91b197efcec57d0c76$export$clear","alert","wait","timer","clearTimeout","setTimeout","$ce9b7eec21a1fd35b54afd61a4a5b21$export$debounce","query","URL","location","href","searchParams","get"],"version":3,"file":"qr-code-painter.c4584894.js.map"}